Timer unit: 1e-09 s

Total time: 49.234 s
File: /Users/dom500d/Documents/extended-schelling-s-model/model.py
Function: is_satisfied at line 131

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   131                                               @profile
   132                                               def is_satisfied(self, agent: Agent, neighbors: list[Agent], tau_u, tau_s):
   133                                                   """Check if agent is satisfied based on utility and similarity thresholds."""
   134   1609916  119700000.0     74.4      0.2          if not neighbors:
   135        18       2000.0    111.1      0.0              return True  # No neighbors, satisfied
   136   1609898  135067000.0     83.9      0.3          similar_neighbors = 0
   137  10194852 1342831000.0    131.7      2.7          for neighbor in neighbors:
   138   8584954        5e+10   5470.3     95.4              if self.compute_similarity(agent.race, neighbor.race) >= tau_s:
   139   2189698  233227000.0    106.5      0.5                  similar_neighbors += 1
   140   1609898  256421000.0    159.3      0.5          theta = similar_neighbors / len(neighbors)
   141                                           
   142   1609898  184333000.0    114.5      0.4          return theta >= tau_u
   143                                               
   144                                           
   145                                           
   146                                           
   147                                                   if main.relaxation_applied:
   148                                                       # Fast zone lookup using precomputed sets
   149                                                       pos = agent.pos
   150                                                       in_good_school_range = pos in main.good_school_zone
   151                                                       in_bad_school_range = pos in main.bad_school_zone
   152                                           
   153                                                       # Modify theta based on school proximity
   154                                                       if in_good_school_range:
   155                                                           theta += 0.3
   156                                                       if in_bad_school_range:
   157                                                           theta -= 0.3
   158                                           
   159                                           
   160                                                   # Ensure theta is in [0, 1]
   161                                                   theta = np.clip(theta, 0, 1)
   162                                           
   163                                                   return theta >= tau_u

Total time: 66.4843 s
File: /Users/dom500d/Documents/extended-schelling-s-model/model.py
Function: find_vacant_spot at line 202

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   202                                               @profile
   203                                               def find_vacant_spot(self, agent: Agent, tau_u, tau_s):
   204                                                   """Find nearest vacant spot where agent would be satisfied."""
   205      3247     932000.0    287.0      0.0          i, j = agent.pos
   206      3247     328000.0    101.0      0.0          original_pos = (i, j)
   207   1585443  316731000.0    199.8      0.5          for index, (ni, nj) in enumerate(self.open_spots):
   208                                                       # Save current state
   209   1583666  150540000.0     95.1      0.2              original_id = agent.id
   210   1583666  268496000.0    169.5      0.4              self.grid[i, j] = 0
   211   1583666  267307000.0    168.8      0.4              self.grid[ni, nj] = original_id
   212   1583666  169274000.0    106.9      0.3              agent.pos = (ni, nj)
   213                                           
   214   1583666 8939302000.0   5644.7     13.4              neighbors = self.get_neighbors(agent)
   215                                                       
   216   1583666        5e+10  34032.5     81.1              satisfied = self.is_satisfied(agent, neighbors, tau_u, tau_s)
   217   1583666 1490225000.0    941.0      2.2              has_money = self.can_move(agent, neighbors, self.income_difference_threshold)
   218                                                       # Revert changes
   219   1583666  352639000.0    222.7      0.5              self.grid[ni, nj] = 0
   220   1583666  288719000.0    182.3      0.4              self.grid[i, j] = original_id
   221   1583666  194511000.0    122.8      0.3              agent.pos = original_pos
   222                                           
   223   1583666  147661000.0     93.2      0.2              if satisfied and has_money:
   224      1470     774000.0    526.5      0.0                  self.open_spots.pop(index)
   225      1470     286000.0    194.6      0.0                  self.open_spots.append(original_pos)
   226      1470     362000.0    246.3      0.0                  return (ni, nj)
   227                                                   # for r in range(1, max(self.width, self.height)):
   228                                                   #     for di in range(-r, r + 1):
   229                                                   #         for dj in range(-r, r + 1):
   230                                                   #             if abs(di) != r and abs(dj) != r:
   231                                                   #                 continue
   232                                                   #             ni, nj = i + di, j + dj
   233                                                   #             if 0 <= ni < self.height and 0 <= nj < self.width and self.grid[ni, nj] == 0:
   234                                                   #                 # Save current state
   235                                                   #                 original_id = agent.id
   236                                                   #                 self.grid[i, j] = 0
   237                                                   #                 self.grid[ni, nj] = original_id
   238                                                   #                 agent.pos = (ni, nj)
   239                                           
   240                                                   #                 neighbors = self.get_neighbors(agent)
   241                                                                   
   242                                                   #                 satisfied = self.is_satisfied(agent, neighbors, tau_u, tau_s)
   243                                                   #                 has_money = self.can_move(agent, neighbors, self.income_difference_threshold)
   244                                                   #                 # Revert changes
   245                                                   #                 self.grid[ni, nj] = 0
   246                                                   #                 self.grid[i, j] = original_id
   247                                                   #                 agent.pos = original_pos
   248                                           
   249                                                   #                 if satisfied and has_money:
   250                                                   #                     return (ni, nj)
   251      1777     177000.0     99.6      0.0          return None

Total time: 75.6801 s
File: /Users/dom500d/Documents/extended-schelling-s-model/model.py
Function: simulate at line 292

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   292                                           @profile
   293                                           def simulate(height, width, population_density, race_income: PropertyGenerator, income_difference_threshold, tau_u, tau_s, max_iter=10000, segregation_type=RaceType(), break_early=True):
   294                                               """Run the simulation for the extended Schelling model."""
   295         1   24936000.0    2e+07      0.0      env = Environment(height, width, population_density, race_income, income_difference_threshold)
   296         1          0.0      0.0      0.0      race_frames = []
   297         1          0.0      0.0      0.0      income_frames = []
   298         1       1000.0   1000.0      0.0      race_w_school_frames = []
   299         1          0.0      0.0      0.0      iteration = 0
   300         1          0.0      0.0      0.0      un_over_t = []
   301         1          0.0      0.0      0.0      seg_over_t = []
   302         1          0.0      0.0      0.0      money_increase = []
   303         1          0.0      0.0      0.0      percentage_sat = 0
   304         1       1000.0   1000.0      0.0      num_agents = int(height*width*population_density)
   305         1          0.0      0.0      0.0      orig_tau_u = tau_u
   306         1          0.0      0.0      0.0      orig_tau_s = tau_s
   307                                               
   308                                               
   309                                               #relaxation_applied = False  # To ensure relaxation is only applied once unless you want to do it repeatedly
   310                                           
   311        14       3000.0    214.3      0.0      while iteration < max_iter:
   312        14  157705000.0    1e+07      0.2          segregation = env.compute_segregation(segregation_type)
   313        14       7000.0    500.0      0.0          seg_over_t.append(segregation)
   314        14  441193000.0    3e+07      0.6          fig = grid_setting.plot_grid(env.grid, env.agents, iteration, segregation, percentage_sat,population_density,color_based_on='race' )
   315        14    3025000.0 216071.4      0.0          buf = io.BytesIO()
   316        14  357147000.0    3e+07      0.5          fig.savefig(buf, format='png')
   317        14       9000.0    642.9      0.0          buf.seek(0)
   318        14   42887000.0    3e+06      0.1          img = Image.open(buf).convert("RGB")
   319        14       7000.0    500.0      0.0          race_frames.append(img)
   320        14    1565000.0 111785.7      0.0          plt.close(fig)
   321                                                   
   322        14 2999331000.0    2e+08      4.0          fig = grid_setting.plot_grid(env.grid, env.agents, iteration, segregation,percentage_sat,population_density, color_based_on='income_intensity' )
   323        14      30000.0   2142.9      0.0          buf = io.BytesIO()
   324        14  355854000.0    3e+07      0.5          fig.savefig(buf, format='png')
   325        14      10000.0    714.3      0.0          buf.seek(0)
   326        14   42128000.0    3e+06      0.1          img = Image.open(buf).convert("RGB")
   327        14       6000.0    428.6      0.0          income_frames.append(img)
   328        14    1456000.0 104000.0      0.0          plt.close(fig)
   329                                           
   330        14       9000.0    642.9      0.0          if main.relaxation_applied:
   331         6  103043000.0    2e+07      0.1              fig = grid_setting.plot_grid(env.grid, env.agents, iteration, segregation, percentage_sat, color_based_on='race_with_schools')
   332         6      90000.0  15000.0      0.0              buf = io.BytesIO()
   333         6  154755000.0    3e+07      0.2              fig.savefig(buf, format='png')
   334         6       4000.0    666.7      0.0              buf.seek(0)
   335         6   18429000.0    3e+06      0.0              img = Image.open(buf).convert("RGB")
   336         6       1000.0    166.7      0.0              race_w_school_frames.append(img)
   337         6     600000.0 100000.0      0.0              plt.close(fig)
   338                                           
   339                                                   
   340        14 1016407000.0    7e+07      1.3          unsatisfied = env.get_unsatisfied_agents(tau_u, tau_s)
   341        14       6000.0    428.6      0.0          un_over_t.append(len(unsatisfied))
   342        14       1000.0     71.4      0.0          moved_any = False
   343        14       3000.0    214.3      0.0          if not unsatisfied:
   344                                                       print("There are no unsatisfied agents.")
   345                                                       break
   346        14    1909000.0 136357.1      0.0          random.shuffle(unsatisfied)
   347                                                   
   348      3261     641000.0    196.6      0.0          for agent in unsatisfied:
   349      3247        7e+10    2e+07     90.2              vacant = env.find_vacant_spot(agent, tau_u, tau_s)
   350      3247     417000.0    128.4      0.0              if vacant is not None:
   351      1470    1228000.0    835.4      0.0                  env.move_agent(agent, vacant)
   352      1470     221000.0    150.3      0.0                  moved_any = True
   353                                           
   354        14          0.0      0.0      0.0          if not moved_any:
   355         2       2000.0   1000.0      0.0              if not main.relaxation_applied and break_early:
   356         1     268000.0 268000.0      0.0                  all_positions = [(i, j) for i in range(main.L) for j in range(main.W)]
   357         3       1000.0    333.3      0.0                  for i in range((main.L * main.W)//1000):
   358         2      21000.0  10500.0      0.0                      agent_positions = random.sample(all_positions, 1) 
   359         2       1000.0    500.0      0.0                      main.good_school.append(agent_positions[0])  
   360                                                               #print(f"good school:{agent_positions[0]}")
   361                                                               
   362         2       5000.0   2500.0      0.0                      agent_positions = random.sample(all_positions, 1) 
   363         2       1000.0    500.0      0.0                      main.bad_school.append(agent_positions[0])  
   364                                                               #print(f"bad school:{agent_positions[0]}")
   365                                                               
   366         1      28000.0  28000.0      0.0                  main.good_school_zone = get_school_range(main.good_school)
   367         1      29000.0  29000.0      0.0                  main.bad_school_zone = get_school_range(main.bad_school)
   368                                           
   369         1      27000.0  27000.0      0.0                  print("No moves possible, increasing da money and lowering the thresholds.")
   370         1       1000.0   1000.0      0.0                  money_increase.append(iteration)
   371                                           
   372                                                           # Relax constraints
   373                                           
   374         1          0.0      0.0      0.0                  env.income_difference_threshold = env.income_difference_threshold + 3
   375                                           
   376         1          0.0      0.0      0.0                  tau_u = tau_u - 0.3  # Decrease satisfaction threshold
   377         1          0.0      0.0      0.0                  tau_s = tau_s - 0.3
   378         1       1000.0   1000.0      0.0                  main.relaxation_applied = True
   379                                           
   380                                           
   381                                                           # Continue from the current state
   382         1          0.0      0.0      0.0                  continue
   383                                           
   384         1          0.0      0.0      0.0              elif break_early:
   385         1      14000.0  14000.0      0.0                  print("No movement and relaxation already applied, breaking.")
   386         1          0.0      0.0      0.0                  break
   387                                                       else:
   388                                                           print("No movement, increasing income threshold.")
   389                                                           #env.income_difference_threshold += 1
   390                                                           money_increase.append(iteration)
   391        12      11000.0    916.7      0.0          percentage_sat = (num_agents-len(unsatisfied))/num_agents
   392        12       3000.0    250.0      0.0          iteration += 1
   393                                               
   394         1   73712000.0    7e+07      0.1      unsatisfied = env.get_unsatisfied_agents(tau_u, tau_s)
   395         1       1000.0   1000.0      0.0      un_over_t.append(len(unsatisfied))
   396         1          0.0      0.0      0.0      percentage_sat = (num_agents-len(unsatisfied))/num_agents #Calculate final satisfaction
   397                                           
   398                                               
   399                                           
   400         1   11305000.0    1e+07      0.0      segregation = env.compute_segregation(segregation_type)
   401         1          0.0      0.0      0.0      seg_over_t.append(segregation)
   402         1   15625000.0    2e+07      0.0      fig = grid_setting.plot_grid(env.grid, env.agents, iteration, segregation,percentage_sat,population_density, color_based_on='race')
   403         1       3000.0   3000.0      0.0      buf = io.BytesIO()
   404         1   25101000.0    3e+07      0.0      fig.savefig(buf, format='png')
   405         1          0.0      0.0      0.0      buf.seek(0)
   406         1    3059000.0    3e+06      0.0      img = Image.open(buf).convert("RGB")
   407         1       1000.0   1000.0      0.0      race_frames.append(img)
   408         1     174000.0 174000.0      0.0      plt.close(fig)
   409         1      68000.0  68000.0      0.0      timestamp = datetime.now().strftime("%m%d_%H%M")
   410         2  461921000.0    2e+08      0.6      race_frames[0].save(
   411         1       4000.0   4000.0      0.0          f"./simulation_results/model_race_{height}_{width}_{population_density}_{income_difference_threshold}_{orig_tau_u}_{orig_tau_s}_{timestamp}.gif",        # Output filename
   412         1          0.0      0.0      0.0          format='GIF',
   413         1          0.0      0.0      0.0          save_all=True,
   414         1       1000.0   1000.0      0.0          append_images=race_frames[1:],
   415         1          0.0      0.0      0.0          duration=300,           # Duration per frame in ms
   416                                               )
   417                                               
   418         1  211321000.0    2e+08      0.3      fig = grid_setting.plot_grid(env.grid, env.agents, iteration, segregation,percentage_sat,population_density, color_based_on='income_intensity')
   419         1       3000.0   3000.0      0.0      buf = io.BytesIO()
   420         1   24937000.0    2e+07      0.0      fig.savefig(buf, format='png')
   421         1          0.0      0.0      0.0      buf.seek(0)
   422         1    2841000.0    3e+06      0.0      img = Image.open(buf).convert("RGB")
   423         1          0.0      0.0      0.0      income_frames.append(img)
   424         1      99000.0  99000.0      0.0      plt.close(fig)
   425         1      15000.0  15000.0      0.0      timestamp = datetime.now().strftime("%Y%m%d_%H%M")
   426         2  488172000.0    2e+08      0.6      income_frames[0].save(
   427         1       4000.0   4000.0      0.0          f"./simulation_results/model_income_{height}_{width}_{population_density}_{income_difference_threshold}_{orig_tau_u}_{orig_tau_s}_{timestamp}.gif",        # Output filename
   428         1          0.0      0.0      0.0          format='GIF',
   429         1          0.0      0.0      0.0          save_all=True,
   430         1       1000.0   1000.0      0.0          append_images=income_frames[1:],
   431         1          0.0      0.0      0.0          duration=300,           # Duration per frame in ms
   432                                               )
   433                                           
   434         1   16464000.0    2e+07      0.0      fig = grid_setting.plot_grid(env.grid, env.agents, iteration, segregation, percentage_sat, color_based_on='race_with_schools')
   435         1       2000.0   2000.0      0.0      buf = io.BytesIO()
   436         1   25121000.0    3e+07      0.0      fig.savefig(buf, format='png')
   437         1          0.0      0.0      0.0      buf.seek(0)
   438         1    2966000.0    3e+06      0.0      img = Image.open(buf).convert("RGB")
   439         1       1000.0   1000.0      0.0      race_w_school_frames.append(img)
   440         1      98000.0  98000.0      0.0      plt.close(fig)
   441         1      16000.0  16000.0      0.0      timestamp = datetime.now().strftime("%Y%m%d_%H%M")
   442         2  215893000.0    1e+08      0.3      race_w_school_frames[0].save(
   443         1       4000.0   4000.0      0.0          f"./simulation_results/model_race_with_schools_{height}_{width}_{population_density}_{income_difference_threshold}_{orig_tau_u}_{orig_tau_s}_{timestamp}.gif",        # Output filename
   444         1          0.0      0.0      0.0          format='GIF',
   445         1          0.0      0.0      0.0          save_all=True,
   446         1       1000.0   1000.0      0.0          append_images=race_w_school_frames[1:],
   447         1          0.0      0.0      0.0          duration=300,           # Duration per frame in ms
   448                                               )
   449                                           
   450                                           
   451         1   18743000.0    2e+07      0.0      fig, axs = plt.subplots(nrows=2, ncols=1, figsize=(10, 10), sharex=True)
   452                                               # --- Plot 1: Unsatisfied Agents Over Time ---
   453         1       1000.0   1000.0      0.0      iteration = list(range(len(un_over_t)))
   454         1     296000.0 296000.0      0.0      axs[0].plot(iteration, un_over_t, label="Unsatisfied Agents", color="blue")
   455         2       1000.0    500.0      0.0      for i in money_increase:
   456         1          0.0      0.0      0.0          if i < len(un_over_t):
   457         1    2426000.0    2e+06      0.0              axs[0].scatter(i, un_over_t[i], color='red', zorder=5, label='Income Threshold Increased' if i == money_increase[0] else "")
   458                                           
   459         1      36000.0  36000.0      0.0      axs[0].set_ylabel("Unsatisfied Count")
   460         1     112000.0 112000.0      0.0      axs[0].set_title("# of Unsatisfied Agents Over Iterations")
   461         1    1155000.0    1e+06      0.0      axs[0].legend()
   462         1     149000.0 149000.0      0.0      axs[0].grid(True)
   463                                           
   464                                               # Plottinv
   465         1     266000.0 266000.0      0.0      axs[1].plot(iteration, seg_over_t, color='green', label="Homophilly")
   466                                           
   467         2          0.0      0.0      0.0      for i in money_increase:
   468         1          0.0      0.0      0.0          if i < len(seg_over_t):
   469         1    1437000.0    1e+06      0.0              axs[1].scatter(i, seg_over_t[i], color='red', zorder=5)
   470                                           
   471         1      34000.0  34000.0      0.0      axs[1].set_xlabel("Iteration")
   472         1      27000.0  27000.0      0.0      axs[1].set_ylabel("Homophilly")
   473         1      98000.0  98000.0      0.0      axs[1].set_title("Homophilly Over Iterations")
   474         1     620000.0 620000.0      0.0      axs[1].legend()
   475         1     165000.0 165000.0      0.0      axs[1].grid(True)
   476                                           
   477         1   89691000.0    9e+07      0.1      plt.savefig(f"./simulation_results/unsatisfied_over_t_{height}_{width}_{population_density}_{income_difference_threshold}_{orig_tau_u}_{orig_tau_s}_{timestamp}.png") 
   478         1          0.0      0.0      0.0      return un_over_t

Total time: 75.6855 s
File: /Users/dom500d/Documents/extended-schelling-s-model/main.py
Function: main at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           @profile
    18                                           def main():
    19                                               #### variable setting 
    20                                               # Grid and simulation parameters
    21                                                 
    22         1          0.0      0.0      0.0      POP_DENSITY = 0.7  # 80% population density
    23         1          0.0      0.0      0.0      MAX_ITER_2 = 1000  # Max iterations for 2-attribute model
    24         1          0.0      0.0      0.0      MAX_ITER_3 = 2000  # Max iterations for 3-attribute model
    25         1          0.0      0.0      0.0      TAU_U = 0.50  # Utility threshold (50%)
    26         1          0.0      0.0      0.0      TAU_S_2 = 0.5 # Similarity threshold for 2-attribute (25%)
    27         1          0.0      0.0      0.0      TAU_S_3 = 0.5   # Similarity threshold for 3-attribute (50%)
    28         1          0.0      0.0      0.0      income_threshold = 0
    29                                               
    30                                           ### simulation
    31                                               # random.seed(42)  # For reproducibility
    32                                               # # Run 2-attribute model
    33                                               # print("Running 2-attribute model...")
    34                                               # iter_2, seg_2 = simulate(2, TAU_U, TAU_S_2, MAX_ITER_2,NUM_AGENTS)
    35                                               # print(f"2-attribute model converged in {iter_2} iterations with segregation level {seg_2}")
    36                                               
    37                                               # # Run 3-attribute model
    38                                               # print("Running 3-attribute model...")
    39                                               # iter_3, seg_3 = simulate(3, TAU_U, TAU_S_3, MAX_ITER_3,NUM_AGENTS)
    40                                               # print(f"3-attribute model converged in {iter_3} iterations with segregation level {seg_3}")
    41         1       2000.0   2000.0      0.0      income = IncomeGenerator([0.25, 0.25, 0.25, 0.25])
    42         1       1000.0   1000.0      0.0      race = RaceGenerator([0.25, 0.25, 0.25, 0.25])
    43                                           
    44         1       9000.0   9000.0      0.0      approx_pdf_values_hispanics = np.array([
    45                                                   0.5, 2.2, 4.8, 5.3, 5, 4.9, 4.0, 3.2,
    46                                                   2.5, 2.0, 1.5, 1.2, 1.0, 0.8, 0.6, 0.5,
    47                                                   0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.08,
    48                                                   0.06, 0.05, 0.04, 0.03, 0.02, 0.01, 0.6  # last spike at 200k
    49                                               ])
    50                                           
    51                                           
    52         1       1000.0   1000.0      0.0      approx_pdf_values_black = np.array([
    53                                                   0.4, 1.5, 3.2, 4.8, 5.2, 5.0, 4.6, 3.9,
    54                                                   3.0, 2.4, 1.8, 1.4, 1.1, 0.9, 0.7, 0.6,
    55                                                   0.5, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.12,
    56                                                   0.1, 0.08, 0.06, 0.04, 0.02, 0.01, 0.6  # spike at 200k
    57                                               ])
    58                                           
    59         1       1000.0   1000.0      0.0      approx_pdf_values_asian = np.array([
    60                                                   0.9, 2.0, 2.8, 3.0, 2.9, 2.8, 2.7, 2.6,
    61                                                   2.4, 2.3, 2.1, 1.9, 1.6, 1.3, 1.1, 0.9,
    62                                                   0.75, 0.66, 0.52, 0.45, 0.4, 0.36, 0.3, 0.24,
    63                                                   0.2, 0.15, 0.11, 0.08, 0.06, 0.05, 5  # spike at 200k
    64                                               ])
    65         1       1000.0   1000.0      0.0      approx_pdf_values_white = np.array([
    66                                                   0.5, 1.2, 2.5, 3.2, 3.8, 4.0, 4.1, 4.0,
    67                                                   3.9, 3.7, 3.4, 3.0, 2.5, 2.1, 1.7, 1.3,
    68                                                   1.0, 0.8, 0.6, 0.5, 0.4, 0.35, 0.3, 0.25,
    69                                                   0.2, 0.15, 0.1, 0.08, 0.06, 0.04, 2.5  # spike at 200k
    70                                               ])
    71                                           
    72         1      39000.0  39000.0      0.0      income_bins = np.linspace(0, 200000, len(approx_pdf_values_hispanics))
    73                                           
    74                                               # Normalize to form a valid PDF
    75         1      19000.0  19000.0      0.0      pdf_values_hispanics = approx_pdf_values_hispanics /np.sum(approx_pdf_values_hispanics)
    76         1       5000.0   5000.0      0.0      pdf_values_black = approx_pdf_values_black /np.sum(approx_pdf_values_black)
    77         1       3000.0   3000.0      0.0      pdf_values_asian = approx_pdf_values_asian /np.sum(approx_pdf_values_asian)
    78         1       3000.0   3000.0      0.0      pdf_values_white = approx_pdf_values_white /np.sum(approx_pdf_values_white)
    79                                           
    80         1          0.0      0.0      0.0      '''
    81                                               white = 0
    82                                               black = 1
    83                                               asian = 2
    84                                               hispanic = 3
    85                                               '''
    86                                           
    87         1          0.0      0.0      0.0      '''san_diego = {0: [0.15, 0.15, 0.16, 0.19, 0.22],
    88                                                       1: [0.22, 0.24, 0.23, 0.17, 0.14],
    89                                                       2: [0.13, 0.13, 0.14, 0.19, 0.24],
    90                                                       3: [0.25, 0.25, 0.20, 0.18, 0.16]}'''
    91                                               
    92                                               
    93                                               
    94                                               # maybe take the most unsatisfied people and then add some money or something to see if they can move.
    95                                               # get the number of unsatisified agents over time
    96                                           
    97         1       1000.0   1000.0      0.0      san_diego = {
    98         1          0.0      0.0      0.0          0: pdf_values_white,
    99         1          0.0      0.0      0.0          1: pdf_values_black,
   100         1          0.0      0.0      0.0          2: pdf_values_asian,
   101         1          0.0      0.0      0.0          3: pdf_values_hispanics
   102                                               }
   103                                               # san_diego = {0: [0.15, 0.15, 0.16, 0.19, 0.22],
   104                                               #         1: [0.22, 0.24, 0.23, 0.17, 0.14],
   105                                               #         2: [0.13, 0.13, 0.14, 0.19, 0.24],
   106                                               #         3: [0.25, 0.25, 0.20, 0.18, 0.16]}
   107                                           
   108                                               #Gaussian distribution
   109         1          0.0      0.0      0.0      '''san_diego = {
   110                                                   0: {'mu': 2.5, 'sigma': 1.5, 'min': 0, 'max': 5},  # White: N(2.5, 1.5)
   111                                                   1: {'mu': 1.5, 'sigma': 1.5, 'min': 0, 'max': 5},  # Black: N(1.5, 1.5)
   112                                                   2: {'mu': 3.0, 'sigma': 1.5, 'min': 0, 'max': 5},  # Asian: N(3.0, 1.5)
   113                                                   3: {'mu': 1.0, 'sigma': 1.5, 'min': 0, 'max': 5}   # Hispanic: N(1.0, 1.5)
   114                                               }'''
   115                                           
   116         1          0.0      0.0      0.0      '''for i in range(0,len(POP_DENSITY)):
   117                                                   relaxation_applied = False
   118                                                   good_school = []
   119                                                   bad_school = []
   120                                                   good_school_zone = []
   121                                                   bad_school_zone = []
   122                                                   TAU_U = 0.50  # Utility threshold (50%)
   123                                                   TAU_S_2 = 0.5 # Similarity threshold for 2-attribute (25%)
   124                                                   income_threshold = 0
   125                                                   thing = Property_Gaussian_Generator(san_diego, race_gen=race)
   126                                                   thing = PropertyGenerator(san_diego, race_gen=race)
   127                                                   NUM_AGENTS = int(L * W * POP_DENSITY[i])
   128                                                   un_over_t = simulate(L, W, POP_DENSITY[i], thing, income_threshold, TAU_U, TAU_S_2)'''
   129                                               #thing = Property_Gaussian_Generator(san_diego, race_gen=race)
   130         1       3000.0   3000.0      0.0      thing = PropertyGenerator(san_diego, race_gen=race)
   131         1       1000.0   1000.0      0.0      NUM_AGENTS = int(L * W * POP_DENSITY)
   132         1        8e+10    8e+10    100.0      un_over_t = simulate(L, W, POP_DENSITY, thing, income_threshold, TAU_U, TAU_S_2)

 49.23 seconds - /Users/dom500d/Documents/extended-schelling-s-model/model.py:131 - is_satisfied
 66.48 seconds - /Users/dom500d/Documents/extended-schelling-s-model/model.py:202 - find_vacant_spot
 75.68 seconds - /Users/dom500d/Documents/extended-schelling-s-model/model.py:292 - simulate
 75.69 seconds - /Users/dom500d/Documents/extended-schelling-s-model/main.py:17 - main
